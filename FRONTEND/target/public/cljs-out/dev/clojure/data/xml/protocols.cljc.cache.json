["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.data.xml.protocols","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$as-elements",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","~:line",26,"~:column",4,"~:end-line",26,"~:end-column",15,"~:protocol","~$clojure.data.xml.protocols/AsElements","~:doc","Return a seq of elements represented by an expression.","~:arglists",["~#list",["~$quote",["^H",[["~$expr"]]]]]],"^D","^E","^5","~$clojure.data.xml.protocols/as-elements","~:variadic",false,"^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",15,"~:method-params",["^H",[["^J"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^A",1,"^@",25,"^B",26,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^F","Return a seq of elements represented by an expression."],"~$EventGeneration",["^ ","^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",17,"^A",14,"^B",17,"^C",29,"^F","Protocol for generating new events based on element type","~:protocol-symbol",true,"~:jsdoc",["^H",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$gen-event",[["~$item"]],"~$next-events",[["^X","~$next-items"]]]]],"^S",true,"^5","~$clojure.data.xml.protocols/EventGeneration","^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",29,"^A",1,"^@",17,"^U",["^ ","^V",["^ ","^W",[["^X"]],"^Y",[["^X","^Z"]]]],"~:info",null,"^B",17,"~:tag","~$any","~:impls",["^4",[]],"^F","Protocol for generating new events based on element type","^T",["^H",["@interface"]]],"~$AsElements",["^ ","^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",25,"^A",14,"^B",25,"^C",24,"^F",null,"^S",true,"^T",["^H",["@interface"]],"^U",["^ ","^V",["^ ","^<",[["^J"]]]]],"^S",true,"^5","^E","^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",24,"^A",1,"^@",25,"^U",["^ ","^V",["^ ","^<",[["^J"]]]],"^10",null,"^B",25,"^11","^12","^13",["^4",[]],"^F",null,"^T",["^H",["@interface"]]],"~$AsXmlString",["^ ","^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",28,"^A",14,"^B",28,"^C",25,"^F",null,"^S",true,"^T",["^H",["@interface"]],"^U",["^ ","^V",["^ ","~$xml-str",[["~$node"]]]]],"^S",true,"^5","~$clojure.data.xml.protocols/AsXmlString","^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",25,"^A",1,"^@",28,"^U",["^ ","^V",["^ ","^16",[["^17"]]]],"^10",null,"^B",28,"^11","^12","^13",["^4",[]],"^F",null,"^T",["^H",["@interface"]]],"~$AsQName",["^ ","^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",13,"^A",14,"^B",13,"^C",21,"^F",null,"^S",true,"^T",["^H",["@interface"]],"^U",["^ ","^V",["^ ","~$qname-local",[["~$qname"]],"~$qname-uri",[["^1;"]]]]],"^S",true,"^5","~$clojure.data.xml.protocols/AsQName","^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",21,"^A",1,"^@",13,"^U",["^ ","^V",["^ ","^1:",[["^1;"]],"^1<",[["^1;"]]]],"^10",null,"^B",13,"^11","^12","^13",["^4",[]],"^F",null,"^T",["^H",["@interface"]]],"^16",["^ ","^=",null,"^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",29,"^A",4,"^B",29,"^C",11,"^D","^18","^F","Serialize atribute value or content node","^G",["^H",["^I",["^H",[["^17"]]]]]],"^D","^18","^5","~$clojure.data.xml.protocols/xml-str","^L",false,"^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",11,"^M",["^H",[["^17"]]],"^N",null,"^O",["^H",[null,null]],"^A",1,"^@",28,"^B",29,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^17"]]]]],"^F","Serialize atribute value or content node"],"^Y",["^ ","^=",null,"^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",21,"^A",4,"^B",21,"^C",15,"^D","^[","^F","Returns the next set of events that should occur after e.  next-events are the\n     events that should be generated after this one is complete.","^G",["^H",["^I",["^H",[["^X","^Z"]]]]]],"^D","^[","^5","~$clojure.data.xml.protocols/next-events","^L",false,"^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",15,"^M",["^H",[["^X","^Z"]]],"^N",null,"^O",["^H",[null,null]],"^A",1,"^@",17,"^B",21,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["^X","^Z"]]]]],"^F","Returns the next set of events that should occur after e.  next-events are the\n     events that should be generated after this one is complete."],"^1<",["^ ","^=",null,"^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",15,"^A",4,"^B",15,"^C",13,"^D","^1=","^F","Get the namespace uri for this qname","^G",["^H",["^I",["^H",[["^1;"]]]]]],"^D","^1=","^5","~$clojure.data.xml.protocols/qname-uri","^L",false,"^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",13,"^M",["^H",[["^1;"]]],"^N",null,"^O",["^H",[null,null]],"^A",1,"^@",13,"^B",15,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^1;"]]]]],"^F","Get the namespace uri for this qname"],"^1:",["^ ","^=",null,"^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",14,"^A",4,"^B",14,"^C",15,"^D","^1=","^F","Get the name for this qname","^G",["^H",["^I",["^H",[["^1;"]]]]]],"^D","^1=","^5","~$clojure.data.xml.protocols/qname-local","^L",false,"^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",15,"^M",["^H",[["^1;"]]],"^N",null,"^O",["^H",[null,null]],"^A",1,"^@",13,"^B",14,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^1;"]]]]],"^F","Get the name for this qname"],"^W",["^ ","^=",null,"^>",["^ ","^?","/home/ja/projects/maks-tycoon/FRONTEND/target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^@",19,"^A",4,"^B",19,"^C",13,"^D","^[","^F","Function to generate an event for e.","^G",["^H",["^I",["^H",[["^X"]]]]]],"^D","^[","^5","~$clojure.data.xml.protocols/gen-event","^L",false,"^?","target/public/cljs-out/dev/clojure/data/xml/protocols.cljc","^C",13,"^M",["^H",[["^X"]]],"^N",null,"^O",["^H",[null,null]],"^A",1,"^@",17,"^B",19,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^X"]]]]],"^F","Function to generate an event for e."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^F",null]